// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Wiwin Mafiroh",
            "email": "wiwinmafiroh@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "This endpoint provides a simple welcome message. It doesn't require authentication.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Welcome message",
                "operationId": "welcome-message",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Retrieve a list of products associated with the authenticated user. Authentication is required using a bearer token. Admins will receive a list of all products, while regular users will only receive the products they have added.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Retrieve a list of products",
                "operationId": "get-products",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Bearer token for authentication. Obtain this token by logging in.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductsRetrievedResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new product by providing the necessary details. Authentication is required using a bearer token. Ensure all required fields are included in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "operationId": "create-product",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Bearer token for authentication. Obtain this token by logging in.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Product creation data. Ensure all required fields are included.",
                        "name": "Product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ProductRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductCreatedResponse"
                        }
                    }
                }
            }
        },
        "/products/{productId}": {
            "get": {
                "description": "Retrieve the details of a specific product by its ID. Admins can retrieve any product, while regular users can only retrieve the products they have added. Authentication is required using a bearer token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Retrieve a product by ID",
                "operationId": "get-product-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Bearer token for authentication. Obtain this token by logging in.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the product to be retrieved",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductRetrievedResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the details of a specific product by its ID. Authentication is required using a bearer token. Admins can update any product, while regular users can only update the products they have added.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update a product by ID",
                "operationId": "update-product-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Bearer token for authentication. Obtain this token by logging in.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the product to be updated",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product update data. Ensure the request body contains all required fields for the update.",
                        "name": "Product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ProductUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductUpdatedResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific product by its ID. Authentication is required using a bearer token. Admins can delete any product, while regular users can only delete the products they have added.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Delete a product by ID",
                "operationId": "delete-product",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003ctoken\u003e",
                        "description": "Bearer token for authentication. Obtain this token by logging in.",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the product to be deleted",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductDeletedResponse"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Log in a user by providing the necessary credentials.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Log in a user",
                "operationId": "user-login",
                "parameters": [
                    {
                        "description": "User login data including email and password.",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserLoginResponse"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Register a new user by providing the necessary information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register a new user",
                "operationId": "user-register",
                "parameters": [
                    {
                        "description": "User registration data. The role can be either 'admin' or 'user'.",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegisterResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreatedProductData": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-08-21T13:48:47.729483+07:00"
                },
                "description": {
                    "type": "string",
                    "example": "Capture breathtaking moments in stunning 4K resolution."
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "imageUrl": {
                    "type": "string",
                    "example": "https://example.com/digital_camera_4k.jpg"
                },
                "name": {
                    "type": "string",
                    "example": "Digital Camera 4K"
                },
                "price": {
                    "type": "number",
                    "example": 7000000
                },
                "userId": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.ProductCreatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.CreatedProductData"
                },
                "message": {
                    "type": "string",
                    "example": "Product created successfully"
                },
                "result": {
                    "type": "string",
                    "example": "SUCCESS"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 201
                }
            }
        },
        "dto.ProductDeletedResponse": {
            "type": "object",
            "properties": {
                "deletedAt": {
                    "type": "string",
                    "example": "2024-08-21T19:41:27.1757419+07:00"
                },
                "message": {
                    "type": "string",
                    "example": "Product deleted successfully"
                },
                "result": {
                    "type": "string",
                    "example": "SUCCESS"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.ProductRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Capture breathtaking moments in stunning 4K resolution."
                },
                "imageUrl": {
                    "type": "string",
                    "example": "https://example.com/digital_camera_4k.jpg"
                },
                "name": {
                    "type": "string",
                    "example": "Digital Camera 4K"
                },
                "price": {
                    "type": "number",
                    "example": 7000000
                }
            }
        },
        "dto.ProductRetrievedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.RetrievedProductData"
                },
                "message": {
                    "type": "string",
                    "example": "Product retrieved successfully"
                },
                "result": {
                    "type": "string",
                    "example": "SUCCESS"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.ProductUpdateRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Bring the party anywhere by our Portable Bluetooth Speaker."
                },
                "imageUrl": {
                    "type": "string",
                    "example": "https://example.com/portable_speaker.jpg"
                },
                "name": {
                    "type": "string",
                    "example": "Portable Bluetooth Speaker"
                },
                "price": {
                    "type": "number",
                    "example": 500000
                }
            }
        },
        "dto.ProductUpdatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UpdatedProductData"
                },
                "message": {
                    "type": "string",
                    "example": "Product updated successfully"
                },
                "result": {
                    "type": "string",
                    "example": "SUCCESS"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.ProductsRetrievedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RetrievedProductData"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Products retrieved successfully"
                },
                "result": {
                    "type": "string",
                    "example": "SUCCESS"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.RetrievedProductData": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-08-21T13:48:47.729483+07:00"
                },
                "description": {
                    "type": "string",
                    "example": "Capture breathtaking moments in stunning 4K resolution."
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "imageUrl": {
                    "type": "string",
                    "example": "https://example.com/digital_camera_4k.jpg"
                },
                "name": {
                    "type": "string",
                    "example": "Digital Camera 4K"
                },
                "price": {
                    "type": "number",
                    "example": 7000000
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-08-21T15:21:08.548216+07:00"
                },
                "userId": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.TokenData": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImpvaG4uZG9lQGV4YW1wbGUuY29tIiwiZXhwIjoxNzI0MjUxMTQyLCJpZCI6MSwicm9sZSI6ImFkbWluIn0.itsoI0KJmw9UiPL132kzzTWptIfN9K2SgimRCnQIXN8"
                }
            }
        },
        "dto.UpdatedProductData": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Bring the party anywhere by our Portable Bluetooth Speaker."
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "imageUrl": {
                    "type": "string",
                    "example": "https://example.com/portable_speaker.jpg"
                },
                "name": {
                    "type": "string",
                    "example": "Portable Bluetooth Speaker"
                },
                "price": {
                    "type": "number",
                    "example": 500000
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-08-21T15:21:08.548216+07:00"
                },
                "userId": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.UserLoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "dto.UserLoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.TokenData"
                },
                "message": {
                    "type": "string",
                    "example": "User logged in successfully"
                },
                "result": {
                    "type": "string",
                    "example": "SUCCESS"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.UserRegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "dto.UserRegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User registered successfully"
                },
                "result": {
                    "type": "string",
                    "example": "SUCCESS"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 201
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "The ProdTrack API Documentation",
	Description:      "ProdTrack API is a comprehensive solution for managing product data. It includes full CRUD operations, along with robust authentication and authorization mechanisms. Admin have the ability to manage all products, while regular users are restricted to managing only their own products. The API is built using Golang and the Gin framework.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
